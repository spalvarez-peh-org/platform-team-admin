version: 2.1

orbs:
  pulumi: pulumi/pulumi@2.1.0
  python: circleci/python@3.1.0

globals:
  - &context PLATFORM_ADMIN

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

executors:
  local-machine:
    machine: true
    resource_class: peh_runner/local_laptop_runner
    working_directory: ~/project

commands:

  load-environment-vars:
    description: Load environment variables from Bitwarden
    steps:
      - run:
          name: Log into Bitwarden using API key
          command: |
            export BITWARDENCLI_APPDATA_DIR="/tmp/bitwarden-session-$$"

            echo "Cleaning up any existing Bitwarden sessions..."
            bw lock || echo "Vault already locked"
            bw logout || echo "No active session"
            rm -rf ~/Library/Application\ Support/Bitwarden\ CLI/ || true
            export BW_SESSION=""

            echo "Logging into Bitwarden..."
            bw login --apikey
            
            echo "Unlock BW session using passwordenv"
            BW_SESSION=$(bw unlock --passwordenv BW_PASSWORD --raw)
            
            if [ -z "$BW_SESSION" ]; then
              echo "Failed to unlock Bitwarden vault"
              exit 1
            fi

            echo "Get GitHub Secrets from Vault"
            ITEM_JSON=$(bw get item "GitHub Secrets" --session "$BW_SESSION")
            
            if [ -z "$ITEM_JSON" ] || [ "$ITEM_JSON" = "null" ]; then
              echo "Failed to retrieve GitHub Secrets item from Bitwarden"
              exit 1
            fi
            
            export GITHUB_TOKEN=$(echo "$ITEM_JSON" | jq -r '.fields[] | select(.name=="pulumi-github-token") | .value')
            export GITHUB_OWNER=$(echo "$ITEM_JSON" | jq -r '.fields[] | select(.name=="pulumi-github-owner") | .value')
            
            if [ "$GITHUB_TOKEN" = "null" ] || [ -z "$GITHUB_TOKEN" ]; then
              echo "Failed to extract GitHub token from Bitwarden item"
              exit 1
            fi
            
            if [ "$GITHUB_OWNER" = "null" ] || [ -z "$GITHUB_OWNER" ]; then
              echo "Failed to extract GitHub owner from Bitwarden item"
              exit 1
            fi
            
            echo "export GITHUB_TOKEN=$GITHUB_TOKEN" >> $BASH_ENV
            echo "export GITHUB_OWNER=$GITHUB_OWNER" >> $BASH_ENV

            echo "Cleaning up Bitwarden session..."
            bw lock
            bw logout
            rm -rf "$BITWARDENCLI_APPDATA_DIR"
  static-analysis:
    description: Lint python project
    steps:
      - run:
          name: Lint Python project
          command: |
            uv venv --clear
            uv add -r requirements.txt
            uv sync
            uv sync --group lint
            uv run ruff check . 
  
  type-checking:
    description: Run static type checking with mypy
    steps:
      - run:
          name: Type check with mypy
          command: |
            uv venv --clear
            uv add -r requirements.txt
            uv sync
            uv sync --group lint
            uv run mypy __main__.py modules/ --explicit-package-bases --ignore-missing-imports --show-error-codes
  
  security-scan:
    description: Run security analysis with bandit
    steps:
      - run:
          name: Security scan with bandit
          command: |
            uv venv --clear
            uv add -r requirements.txt
            uv sync
            uv sync --group lint
            uv run bandit -r __main__.py modules/ -f json -o bandit-report.json || true
            uv run bandit -r __main__.py modules/ -ll
  
  format-check:
    description: Check code formatting and import sorting
    steps:
      - run:
          name: Check code formatting with black
          command: |
            uv venv --clear
            uv add -r requirements.txt
            uv sync
            uv sync --group lint
            uv run black --check --diff __main__.py modules/ test/
      - run:
          name: Check import sorting with isort
          command: |
            uv venv --clear
            uv add -r requirements.txt
            uv sync
            uv sync --group lint
            uv run isort --check-only --diff __main__.py modules/ test/
  
  run-unit-tests:
    description: Run all unit tests in the project
    steps:
      - run:
          name: Run unit tests
          command: |
            uv venv --clear
            uv add -r requirements.txt
            uv sync
            uv sync --group test
            uv run pytest test/ -v --tb=short
  
  verify-code-coverage:
    description: Verify code coverage meets requirements
    steps:
      - run:
          name: Run tests with coverage analysis
          command: |
            uv venv --clear
            uv add -r requirements.txt
            uv sync
            uv sync --group test
            uv run pytest test/ --cov=modules --cov-report=term --cov-report=html --cov-fail-under=90
      - run:
          name: Display coverage report
          command: |
            echo "Coverage report generated in htmlcov/ directory"
            uv run coverage report --show-missing
  
  load-pulumi-environment:
    description: Load Pulumi dependencies
    steps:
      - pulumi/login
      - python/install-packages:
          pkg-manager: uv
      - run:
          name: Install packages
          command: |
            uv venv --clear
            uv add -r requirements.txt
            uv sync

  post-deployment-tests:
    description: Run post-deployment validation tests
    steps:
      - run:
          name: Infrastructure validation tests
          command: |
            uv venv --clear
            uv add -r requirements.txt
            uv sync
            uv sync --group test
            echo "Running post-deployment validation..."
            
            # Verify Pulumi stack state
            pulumi stack output --json > stack-outputs.json
            
            # Run integration tests (if they exist)
            if [ -d "test/integration" ]; then
              echo "Running integration tests..."
              uv run pytest test/integration/ -v --tb=short -m "integration"
            else
              echo "No integration tests found (test/integration/ directory not present)"
            fi
            
            # Verify GitHub organization state
            echo "Validating GitHub organization state..."
            # Note: These would require GitHub API calls to verify actual state
            # For now, we'll verify that the stack outputs contain expected resources
            
            if command -v jq >/dev/null 2>&1; then
              echo "Checking stack outputs for expected resources..."
              # Example validations - adjust based on your actual outputs
              MEMBER_COUNT=$(jq -r 'keys | map(select(test("-github$"))) | length' stack-outputs.json)
              echo "Found $MEMBER_COUNT member exports in stack outputs"
              
              REPO_COUNT=$(jq -r 'keys | map(select(test("-repository$"))) | length' stack-outputs.json)
              echo "Found $REPO_COUNT repository exports in stack outputs"
              
              if [ "$MEMBER_COUNT" -eq 0 ] && [ "$REPO_COUNT" -eq 0 ]; then
                echo "Warning: No member or repository outputs found"
              else
                echo "✅ Stack outputs validation passed"
              fi
            else
              echo "jq not available, skipping stack output validation"
            fi
      - run:
          name: GitHub API validation
          command: |
            echo "Validating actual GitHub state via API..."
            # Only run if we have GitHub credentials
            if [ -n "${GITHUB_TOKEN:-}" ] && [ -n "${GITHUB_OWNER:-}" ]; then
              echo "Checking organization members..."
              curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/orgs/$GITHUB_OWNER/members" | \
                jq -r '.[].login' > current-members.txt
              
              echo "Current organization members:"
              cat current-members.txt
              
              echo "Checking organization repositories..."
              curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/orgs/$GITHUB_OWNER/repos?type=all&per_page=100" | \
                jq -r '.[].name' > current-repos.txt
              
              echo "Current organization repositories:"
              cat current-repos.txt
              
              echo "✅ GitHub API validation completed"
            else
              echo "GitHub credentials not available, skipping API validation"
            fi

jobs:
  pulumi-preview:
    description: |
      Preview Pulumi stack changes
    executor: local-machine
    parameters:
      pulumi_stack:
        description: Pulumi stack to preview
        type: string
    environment:
      PULUMI_STACK: << parameters.pulumi_stack >>
    steps:
      - checkout
      - static-analysis
      - type-checking
      - security-scan
      - format-check
      - run-unit-tests
      - verify-code-coverage
      - load-environment-vars   
      - load-pulumi-environment
      - pulumi/preview:
          stack: "${PULUMI_STACK}" 
  pulumi-update:
    description: |
      Update Pulumi stack
    executor: local-machine
    parameters:
      pulumi_stack:
        description: Pulumi stack to update
        type: string
    environment:
      PULUMI_STACK: << parameters.pulumi_stack >>
    steps:
      - checkout
      - static-analysis
      - type-checking
      - security-scan
      - format-check
      - run-unit-tests
      - verify-code-coverage
      - load-environment-vars   
      - load-pulumi-environment
      - pulumi/update:
          stack: "${PULUMI_STACK}"
          skip-preview: false
      - post-deployment-tests

          
workflows:
  preview:
    jobs:
      - pulumi-preview:
          context: *context
          pulumi_stack: dev
          filters: *on-push-main
  update:
    jobs:
      - pulumi-preview:
          context: *context
          pulumi_stack: dev
          filters: *on-tag-main
      - approve github changes:
          type: approval
          requires:
            - pulumi-preview
          filters: *on-tag-main
      - pulumi-update:
          context: *context
          pulumi_stack: dev
          requires:
            - approve github changes
          filters: *on-tag-main
