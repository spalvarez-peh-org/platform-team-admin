#!/bin/bash

set -e

echo "🔍 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if we're in the right directory and have the right setup
if [ ! -f "pyproject.toml" ]; then
    print_error "pyproject.toml not found. Are you in the project root?"
    exit 1
fi

# Set up the environment
print_status "Setting up environment..."
if ! command -v uv &> /dev/null; then
    print_error "uv is not installed. Please install uv first."
    exit 1
fi

# Install dependencies
print_status "Installing dependencies..."
uv sync --group lint --group test --quiet

# Get list of staged Python files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(py)$' || true)

if [ -z "$STAGED_FILES" ]; then
    print_warning "No Python files staged for commit."
    exit 0
fi

print_status "Checking staged Python files: $(echo $STAGED_FILES | wc -w) files"

# Function to run a check and handle errors
run_check() {
    local check_name="$1"
    local command="$2"
    local fix_command="$3"
    
    print_status "Running $check_name..."
    
    if eval "$command"; then
        print_success "$check_name passed"
        return 0
    else
        print_error "$check_name failed"
        if [ -n "$fix_command" ]; then
            echo -e "${YELLOW}💡 Try running: $fix_command${NC}"
        fi
        return 1
    fi
}

# Track if any checks failed
FAILED=0

# 1. Code formatting check with black
if ! run_check "Black formatting" "uv run black --check --diff __main__.py tests/" "uv run black __main__.py tests/"; then
    FAILED=1
fi

# 2. Import sorting check with isort
if ! run_check "Import sorting" "uv run isort --check-only --diff __main__.py tests/" "uv run isort __main__.py tests/"; then
    FAILED=1
fi

# 3. Linting with ruff
if ! run_check "Ruff linting" "uv run ruff check ." "uv run ruff check . --fix"; then
    FAILED=1
fi

# 4. Type checking with mypy
if ! run_check "Type checking" "uv run mypy __main__.py --explicit-package-bases --ignore-missing-imports --show-error-codes" ""; then
    FAILED=1
fi

# 5. Security scanning with bandit
if ! run_check "Security scanning" "uv run bandit -r __main__.py -ll" ""; then
    FAILED=1
fi

# Summary
if [ $FAILED -eq 0 ]; then
    print_success "All pre-commit checks passed! 🎉"
    echo ""
    echo -e "${GREEN}Your code is ready to commit.${NC}"
    exit 0
else
    print_error "Some pre-commit checks failed!"
    echo ""
    echo -e "${RED}Please fix the issues above before committing.${NC}"
    echo -e "${YELLOW}You can also use --no-verify to skip these checks (not recommended).${NC}"
    exit 1
fi
