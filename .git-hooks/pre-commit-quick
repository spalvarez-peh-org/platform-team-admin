#!/bin/bash

set -e

echo "⚡ Running quick pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "pyproject.toml" ]; then
    print_error "pyproject.toml not found. Are you in the project root?"
    exit 1
fi

# Install dependencies quietly
uv sync --group lint --quiet

# Get list of staged Python files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(py)$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo "No Python files staged for commit."
    exit 0
fi

# Track failures
FAILED=0

# Quick checks only (no tests or coverage)
print_status "Black formatting..."
if ! uv run black --check --diff __main__.py modules/ test/ > /dev/null 2>&1; then
    print_error "Black formatting failed"
    echo "💡 Run: uv run black __main__.py modules/ test/"
    FAILED=1
else
    print_success "Black formatting"
fi

print_status "Import sorting..."
if ! uv run isort --check-only __main__.py modules/ test/ > /dev/null 2>&1; then
    print_error "Import sorting failed"
    echo "💡 Run: uv run isort __main__.py modules/ test/"
    FAILED=1
else
    print_success "Import sorting"
fi

print_status "Ruff linting..."
if ! uv run ruff check . > /dev/null 2>&1; then
    print_error "Ruff linting failed"
    echo "💡 Run: uv run ruff check . --fix"
    FAILED=1
else
    print_success "Ruff linting"
fi

# Summary
if [ $FAILED -eq 0 ]; then
    print_success "Quick checks passed! ⚡"
    echo -e "${YELLOW}💡 Full checks (including tests) will run in CI pipeline${NC}"
else
    print_error "Quick checks failed!"
    echo -e "${RED}Please fix the formatting/linting issues above${NC}"
    exit 1
fi
