# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import sys
from collections.abc import Mapping, Sequence
from typing import Any, Union, overload

import pulumi
import pulumi.runtime

if sys.version_info >= (3, 11):
    pass
else:
    pass
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[_builtins.str] | None = None,
                 client_id: pulumi.Input[_builtins.str] | None = None,
                 client_secret: pulumi.Input[_builtins.str] | None = None,
                 email: pulumi.Input[_builtins.str] | None = None,
                 experimentals: pulumi.Input[Sequence[pulumi.Input['ProviderExperimentalArgs']]] | None = None,
                 extra_ca_certs: pulumi.Input[_builtins.str] | None = None,
                 master_password: pulumi.Input[_builtins.str] | None = None,
                 server: pulumi.Input[_builtins.str] | None = None,
                 session_key: pulumi.Input[_builtins.str] | None = None,
                 vault_path: pulumi.Input[_builtins.str] | None = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[_builtins.str] access_token: Machine Account Access Token (env: `BWS_ACCESS_TOKEN`)).
        :param pulumi.Input[_builtins.str] client_id: Client ID (env: `BW_CLIENTID`)
        :param pulumi.Input[_builtins.str] email: Login Email of the Vault (env: `BW_EMAIL`).
        :param pulumi.Input[Sequence[pulumi.Input['ProviderExperimentalArgs']]] experimentals: Enable experimental features.
        :param pulumi.Input[_builtins.str] extra_ca_certs: Extends the well known 'root' CAs (like VeriSign) with the extra certificates in file (env: `NODE_EXTRA_CA_CERTS`,
               doesn't work with embedded client).
        :param pulumi.Input[_builtins.str] server: Bitwarden Server URL (default: `https://vault.bitwarden.com`, env: `BW_URL`).
        :param pulumi.Input[_builtins.str] session_key: A Bitwarden Session Key (env: `BW_SESSION`)
        :param pulumi.Input[_builtins.str] vault_path: Alternative directory for storing the Vault locally (default: `.bitwarden/`, env: `BITWARDENCLI_APPDATA_DIR`; set to
               empty string to use CLI default).
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if experimentals is not None:
            pulumi.set(__self__, "experimentals", experimentals)
        if extra_ca_certs is not None:
            pulumi.set(__self__, "extra_ca_certs", extra_ca_certs)
        if master_password is not None:
            pulumi.set(__self__, "master_password", master_password)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if session_key is not None:
            pulumi.set(__self__, "session_key", session_key)
        if vault_path is not None:
            pulumi.set(__self__, "vault_path", vault_path)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[_builtins.str] | None:
        """
        Machine Account Access Token (env: `BWS_ACCESS_TOKEN`)).
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "access_token", value)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[_builtins.str] | None:
        """
        Client ID (env: `BW_CLIENTID`)
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[_builtins.str] | None:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "client_secret", value)

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Input[_builtins.str] | None:
        """
        Login Email of the Vault (env: `BW_EMAIL`).
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter
    def experimentals(self) -> pulumi.Input[Sequence[pulumi.Input['ProviderExperimentalArgs']]] | None:
        """
        Enable experimental features.
        """
        return pulumi.get(self, "experimentals")

    @experimentals.setter
    def experimentals(self, value: pulumi.Input[Sequence[pulumi.Input['ProviderExperimentalArgs']]] | None):
        pulumi.set(self, "experimentals", value)

    @_builtins.property
    @pulumi.getter(name="extraCaCerts")
    def extra_ca_certs(self) -> pulumi.Input[_builtins.str] | None:
        """
        Extends the well known 'root' CAs (like VeriSign) with the extra certificates in file (env: `NODE_EXTRA_CA_CERTS`,
        doesn't work with embedded client).
        """
        return pulumi.get(self, "extra_ca_certs")

    @extra_ca_certs.setter
    def extra_ca_certs(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "extra_ca_certs", value)

    @_builtins.property
    @pulumi.getter(name="masterPassword")
    def master_password(self) -> pulumi.Input[_builtins.str] | None:
        return pulumi.get(self, "master_password")

    @master_password.setter
    def master_password(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "master_password", value)

    @_builtins.property
    @pulumi.getter
    def server(self) -> pulumi.Input[_builtins.str] | None:
        """
        Bitwarden Server URL (default: `https://vault.bitwarden.com`, env: `BW_URL`).
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "server", value)

    @_builtins.property
    @pulumi.getter(name="sessionKey")
    def session_key(self) -> pulumi.Input[_builtins.str] | None:
        """
        A Bitwarden Session Key (env: `BW_SESSION`)
        """
        return pulumi.get(self, "session_key")

    @session_key.setter
    def session_key(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "session_key", value)

    @_builtins.property
    @pulumi.getter(name="vaultPath")
    def vault_path(self) -> pulumi.Input[_builtins.str] | None:
        """
        Alternative directory for storing the Vault locally (default: `.bitwarden/`, env: `BITWARDENCLI_APPDATA_DIR`; set to
        empty string to use CLI default).
        """
        return pulumi.get(self, "vault_path")

    @vault_path.setter
    def vault_path(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "vault_path", value)


@pulumi.type_token("pulumi:providers:bitwarden")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: pulumi.ResourceOptions | None = None,
                 access_token: pulumi.Input[_builtins.str] | None = None,
                 client_id: pulumi.Input[_builtins.str] | None = None,
                 client_secret: pulumi.Input[_builtins.str] | None = None,
                 email: pulumi.Input[_builtins.str] | None = None,
                 experimentals: pulumi.Input[Sequence[pulumi.Input[Union['ProviderExperimentalArgs', 'ProviderExperimentalArgsDict']]]] | None = None,
                 extra_ca_certs: pulumi.Input[_builtins.str] | None = None,
                 master_password: pulumi.Input[_builtins.str] | None = None,
                 server: pulumi.Input[_builtins.str] | None = None,
                 session_key: pulumi.Input[_builtins.str] | None = None,
                 vault_path: pulumi.Input[_builtins.str] | None = None,
                 __props__=None):
        """
        The provider type for the bitwarden package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_token: Machine Account Access Token (env: `BWS_ACCESS_TOKEN`)).
        :param pulumi.Input[_builtins.str] client_id: Client ID (env: `BW_CLIENTID`)
        :param pulumi.Input[_builtins.str] email: Login Email of the Vault (env: `BW_EMAIL`).
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProviderExperimentalArgs', 'ProviderExperimentalArgsDict']]]] experimentals: Enable experimental features.
        :param pulumi.Input[_builtins.str] extra_ca_certs: Extends the well known 'root' CAs (like VeriSign) with the extra certificates in file (env: `NODE_EXTRA_CA_CERTS`,
               doesn't work with embedded client).
        :param pulumi.Input[_builtins.str] server: Bitwarden Server URL (default: `https://vault.bitwarden.com`, env: `BW_URL`).
        :param pulumi.Input[_builtins.str] session_key: A Bitwarden Session Key (env: `BW_SESSION`)
        :param pulumi.Input[_builtins.str] vault_path: Alternative directory for storing the Vault locally (default: `.bitwarden/`, env: `BITWARDENCLI_APPDATA_DIR`; set to
               empty string to use CLI default).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs | None = None,
                 opts: pulumi.ResourceOptions | None = None):
        """
        The provider type for the bitwarden package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: pulumi.ResourceOptions | None = None,
                 access_token: pulumi.Input[_builtins.str] | None = None,
                 client_id: pulumi.Input[_builtins.str] | None = None,
                 client_secret: pulumi.Input[_builtins.str] | None = None,
                 email: pulumi.Input[_builtins.str] | None = None,
                 experimentals: pulumi.Input[Sequence[pulumi.Input[Union['ProviderExperimentalArgs', 'ProviderExperimentalArgsDict']]]] | None = None,
                 extra_ca_certs: pulumi.Input[_builtins.str] | None = None,
                 master_password: pulumi.Input[_builtins.str] | None = None,
                 server: pulumi.Input[_builtins.str] | None = None,
                 session_key: pulumi.Input[_builtins.str] | None = None,
                 vault_path: pulumi.Input[_builtins.str] | None = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["access_token"] = access_token
            __props__.__dict__["client_id"] = client_id
            __props__.__dict__["client_secret"] = client_secret
            __props__.__dict__["email"] = email
            __props__.__dict__["experimentals"] = pulumi.Output.from_input(experimentals).apply(pulumi.runtime.to_json) if experimentals is not None else None
            __props__.__dict__["extra_ca_certs"] = extra_ca_certs
            __props__.__dict__["master_password"] = master_password
            __props__.__dict__["server"] = server
            __props__.__dict__["session_key"] = session_key
            __props__.__dict__["vault_path"] = vault_path
        super(Provider, __self__).__init__(
            'bitwarden',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Output[_builtins.str | None]:
        """
        Machine Account Access Token (env: `BWS_ACCESS_TOKEN`)).
        """
        return pulumi.get(self, "access_token")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[_builtins.str | None]:
        """
        Client ID (env: `BW_CLIENTID`)
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[_builtins.str | None]:
        return pulumi.get(self, "client_secret")

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Output[_builtins.str | None]:
        """
        Login Email of the Vault (env: `BW_EMAIL`).
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="extraCaCerts")
    def extra_ca_certs(self) -> pulumi.Output[_builtins.str | None]:
        """
        Extends the well known 'root' CAs (like VeriSign) with the extra certificates in file (env: `NODE_EXTRA_CA_CERTS`,
        doesn't work with embedded client).
        """
        return pulumi.get(self, "extra_ca_certs")

    @_builtins.property
    @pulumi.getter(name="masterPassword")
    def master_password(self) -> pulumi.Output[_builtins.str | None]:
        return pulumi.get(self, "master_password")

    @_builtins.property
    @pulumi.getter
    def server(self) -> pulumi.Output[_builtins.str | None]:
        """
        Bitwarden Server URL (default: `https://vault.bitwarden.com`, env: `BW_URL`).
        """
        return pulumi.get(self, "server")

    @_builtins.property
    @pulumi.getter(name="sessionKey")
    def session_key(self) -> pulumi.Output[_builtins.str | None]:
        """
        A Bitwarden Session Key (env: `BW_SESSION`)
        """
        return pulumi.get(self, "session_key")

    @_builtins.property
    @pulumi.getter(name="vaultPath")
    def vault_path(self) -> pulumi.Output[_builtins.str | None]:
        """
        Alternative directory for storing the Vault locally (default: `.bitwarden/`, env: `BITWARDENCLI_APPDATA_DIR`; set to
        empty string to use CLI default).
        """
        return pulumi.get(self, "vault_path")

    @pulumi.output_type
    class TerraformConfigResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, dict):
                raise TypeError("Expected argument 'result' to be a dict")
            pulumi.set(__self__, "result", result)

        @_builtins.property
        @pulumi.getter
        def result(self) -> Mapping[str, Any]:
            return pulumi.get(self, "result")

    def terraform_config(__self__) -> pulumi.Output['Provider.TerraformConfigResult']:
        """
        This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        return pulumi.runtime.call('pulumi:providers:bitwarden/terraformConfig', __args__, res=__self__, typ=Provider.TerraformConfigResult, package_ref=_utilities.get_package())

