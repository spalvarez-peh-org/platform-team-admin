# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import sys
from collections.abc import Sequence
from typing import Union, overload

import pulumi
import pulumi.runtime

if sys.version_info >= (3, 11):
    pass
else:
    pass
from . import _utilities, outputs
from ._inputs import *

__all__ = ['OrgCollectionArgs', 'OrgCollection']

@pulumi.input_type
class OrgCollectionArgs:
    def __init__(__self__, *,
                 organization_id: pulumi.Input[_builtins.str],
                 members: pulumi.Input[Sequence[pulumi.Input['OrgCollectionMemberArgs']]] | None = None,
                 name: pulumi.Input[_builtins.str] | None = None,
                 org_collection_id: pulumi.Input[_builtins.str] | None = None):
        """
        The set of arguments for constructing a OrgCollection resource.
        :param pulumi.Input[_builtins.str] organization_id: Identifier of the organization.
        :param pulumi.Input[Sequence[pulumi.Input['OrgCollectionMemberArgs']]] members: [Experimental] Member of a collection.
        :param pulumi.Input[_builtins.str] name: Name.
        :param pulumi.Input[_builtins.str] org_collection_id: Identifier.
        """
        pulumi.set(__self__, "organization_id", organization_id)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_collection_id is not None:
            pulumi.set(__self__, "org_collection_id", org_collection_id)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[_builtins.str]:
        """
        Identifier of the organization.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter
    def members(self) -> pulumi.Input[Sequence[pulumi.Input['OrgCollectionMemberArgs']]] | None:
        """
        [Experimental] Member of a collection.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: pulumi.Input[Sequence[pulumi.Input['OrgCollectionMemberArgs']]] | None):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str] | None:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orgCollectionId")
    def org_collection_id(self) -> pulumi.Input[_builtins.str] | None:
        """
        Identifier.
        """
        return pulumi.get(self, "org_collection_id")

    @org_collection_id.setter
    def org_collection_id(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "org_collection_id", value)


@pulumi.input_type
class _OrgCollectionState:
    def __init__(__self__, *,
                 members: pulumi.Input[Sequence[pulumi.Input['OrgCollectionMemberArgs']]] | None = None,
                 name: pulumi.Input[_builtins.str] | None = None,
                 org_collection_id: pulumi.Input[_builtins.str] | None = None,
                 organization_id: pulumi.Input[_builtins.str] | None = None):
        """
        Input properties used for looking up and filtering OrgCollection resources.
        :param pulumi.Input[Sequence[pulumi.Input['OrgCollectionMemberArgs']]] members: [Experimental] Member of a collection.
        :param pulumi.Input[_builtins.str] name: Name.
        :param pulumi.Input[_builtins.str] org_collection_id: Identifier.
        :param pulumi.Input[_builtins.str] organization_id: Identifier of the organization.
        """
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_collection_id is not None:
            pulumi.set(__self__, "org_collection_id", org_collection_id)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)

    @_builtins.property
    @pulumi.getter
    def members(self) -> pulumi.Input[Sequence[pulumi.Input['OrgCollectionMemberArgs']]] | None:
        """
        [Experimental] Member of a collection.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: pulumi.Input[Sequence[pulumi.Input['OrgCollectionMemberArgs']]] | None):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str] | None:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orgCollectionId")
    def org_collection_id(self) -> pulumi.Input[_builtins.str] | None:
        """
        Identifier.
        """
        return pulumi.get(self, "org_collection_id")

    @org_collection_id.setter
    def org_collection_id(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "org_collection_id", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[_builtins.str] | None:
        """
        Identifier of the organization.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "organization_id", value)


@pulumi.type_token("bitwarden:index/orgCollection:OrgCollection")
class OrgCollection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: pulumi.ResourceOptions | None = None,
                 members: pulumi.Input[Sequence[pulumi.Input[Union['OrgCollectionMemberArgs', 'OrgCollectionMemberArgsDict']]]] | None = None,
                 name: pulumi.Input[_builtins.str] | None = None,
                 org_collection_id: pulumi.Input[_builtins.str] | None = None,
                 organization_id: pulumi.Input[_builtins.str] | None = None,
                 __props__=None):
        """
        Create a OrgCollection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OrgCollectionMemberArgs', 'OrgCollectionMemberArgsDict']]]] members: [Experimental] Member of a collection.
        :param pulumi.Input[_builtins.str] name: Name.
        :param pulumi.Input[_builtins.str] org_collection_id: Identifier.
        :param pulumi.Input[_builtins.str] organization_id: Identifier of the organization.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgCollectionArgs,
                 opts: pulumi.ResourceOptions | None = None):
        """
        Create a OrgCollection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OrgCollectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgCollectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: pulumi.ResourceOptions | None = None,
                 members: pulumi.Input[Sequence[pulumi.Input[Union['OrgCollectionMemberArgs', 'OrgCollectionMemberArgsDict']]]] | None = None,
                 name: pulumi.Input[_builtins.str] | None = None,
                 org_collection_id: pulumi.Input[_builtins.str] | None = None,
                 organization_id: pulumi.Input[_builtins.str] | None = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgCollectionArgs.__new__(OrgCollectionArgs)

            __props__.__dict__["members"] = members
            __props__.__dict__["name"] = name
            __props__.__dict__["org_collection_id"] = org_collection_id
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
        super(OrgCollection, __self__).__init__(
            'bitwarden:index/orgCollection:OrgCollection',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: pulumi.ResourceOptions | None = None,
            members: pulumi.Input[Sequence[pulumi.Input[Union['OrgCollectionMemberArgs', 'OrgCollectionMemberArgsDict']]]] | None = None,
            name: pulumi.Input[_builtins.str] | None = None,
            org_collection_id: pulumi.Input[_builtins.str] | None = None,
            organization_id: pulumi.Input[_builtins.str] | None = None) -> 'OrgCollection':
        """
        Get an existing OrgCollection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OrgCollectionMemberArgs', 'OrgCollectionMemberArgsDict']]]] members: [Experimental] Member of a collection.
        :param pulumi.Input[_builtins.str] name: Name.
        :param pulumi.Input[_builtins.str] org_collection_id: Identifier.
        :param pulumi.Input[_builtins.str] organization_id: Identifier of the organization.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgCollectionState.__new__(_OrgCollectionState)

        __props__.__dict__["members"] = members
        __props__.__dict__["name"] = name
        __props__.__dict__["org_collection_id"] = org_collection_id
        __props__.__dict__["organization_id"] = organization_id
        return OrgCollection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence['outputs.OrgCollectionMember'] | None]:
        """
        [Experimental] Member of a collection.
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orgCollectionId")
    def org_collection_id(self) -> pulumi.Output[_builtins.str]:
        """
        Identifier.
        """
        return pulumi.get(self, "org_collection_id")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[_builtins.str]:
        """
        Identifier of the organization.
        """
        return pulumi.get(self, "organization_id")

