# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import sys
from typing import overload

import pulumi
import pulumi.runtime

if sys.version_info >= (3, 11):
    pass
else:
    pass
from . import _utilities

__all__ = ['AttachmentArgs', 'Attachment']

@pulumi.input_type
class AttachmentArgs:
    def __init__(__self__, *,
                 item_id: pulumi.Input[_builtins.str],
                 content: pulumi.Input[_builtins.str] | None = None,
                 file: pulumi.Input[_builtins.str] | None = None,
                 file_name: pulumi.Input[_builtins.str] | None = None):
        """
        The set of arguments for constructing a Attachment resource.
        :param pulumi.Input[_builtins.str] item_id: Identifier of the item the attachment belongs to
        :param pulumi.Input[_builtins.str] content: Content of the attachment
        :param pulumi.Input[_builtins.str] file: Path to the content of the attachment.
        :param pulumi.Input[_builtins.str] file_name: File name. Required if specifying `content` in a resource.
        """
        pulumi.set(__self__, "item_id", item_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)

    @_builtins.property
    @pulumi.getter(name="itemId")
    def item_id(self) -> pulumi.Input[_builtins.str]:
        """
        Identifier of the item the attachment belongs to
        """
        return pulumi.get(self, "item_id")

    @item_id.setter
    def item_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "item_id", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str] | None:
        """
        Content of the attachment
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def file(self) -> pulumi.Input[_builtins.str] | None:
        """
        Path to the content of the attachment.
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "file", value)

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Input[_builtins.str] | None:
        """
        File name. Required if specifying `content` in a resource.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "file_name", value)


@pulumi.input_type
class _AttachmentState:
    def __init__(__self__, *,
                 content: pulumi.Input[_builtins.str] | None = None,
                 file: pulumi.Input[_builtins.str] | None = None,
                 file_name: pulumi.Input[_builtins.str] | None = None,
                 item_id: pulumi.Input[_builtins.str] | None = None,
                 size: pulumi.Input[_builtins.str] | None = None,
                 size_name: pulumi.Input[_builtins.str] | None = None,
                 url: pulumi.Input[_builtins.str] | None = None):
        """
        Input properties used for looking up and filtering Attachment resources.
        :param pulumi.Input[_builtins.str] content: Content of the attachment
        :param pulumi.Input[_builtins.str] file: Path to the content of the attachment.
        :param pulumi.Input[_builtins.str] file_name: File name. Required if specifying `content` in a resource.
        :param pulumi.Input[_builtins.str] item_id: Identifier of the item the attachment belongs to
        :param pulumi.Input[_builtins.str] size: Size in bytes
        :param pulumi.Input[_builtins.str] size_name: Size as string
        :param pulumi.Input[_builtins.str] url: URL
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if item_id is not None:
            pulumi.set(__self__, "item_id", item_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if size_name is not None:
            pulumi.set(__self__, "size_name", size_name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str] | None:
        """
        Content of the attachment
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def file(self) -> pulumi.Input[_builtins.str] | None:
        """
        Path to the content of the attachment.
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "file", value)

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Input[_builtins.str] | None:
        """
        File name. Required if specifying `content` in a resource.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "file_name", value)

    @_builtins.property
    @pulumi.getter(name="itemId")
    def item_id(self) -> pulumi.Input[_builtins.str] | None:
        """
        Identifier of the item the attachment belongs to
        """
        return pulumi.get(self, "item_id")

    @item_id.setter
    def item_id(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "item_id", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.str] | None:
        """
        Size in bytes
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="sizeName")
    def size_name(self) -> pulumi.Input[_builtins.str] | None:
        """
        Size as string
        """
        return pulumi.get(self, "size_name")

    @size_name.setter
    def size_name(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "size_name", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str] | None:
        """
        URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "url", value)


@pulumi.type_token("bitwarden:index/attachment:Attachment")
class Attachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: pulumi.ResourceOptions | None = None,
                 content: pulumi.Input[_builtins.str] | None = None,
                 file: pulumi.Input[_builtins.str] | None = None,
                 file_name: pulumi.Input[_builtins.str] | None = None,
                 item_id: pulumi.Input[_builtins.str] | None = None,
                 __props__=None):
        """
        Create a Attachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] content: Content of the attachment
        :param pulumi.Input[_builtins.str] file: Path to the content of the attachment.
        :param pulumi.Input[_builtins.str] file_name: File name. Required if specifying `content` in a resource.
        :param pulumi.Input[_builtins.str] item_id: Identifier of the item the attachment belongs to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AttachmentArgs,
                 opts: pulumi.ResourceOptions | None = None):
        """
        Create a Attachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: pulumi.ResourceOptions | None = None,
                 content: pulumi.Input[_builtins.str] | None = None,
                 file: pulumi.Input[_builtins.str] | None = None,
                 file_name: pulumi.Input[_builtins.str] | None = None,
                 item_id: pulumi.Input[_builtins.str] | None = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AttachmentArgs.__new__(AttachmentArgs)

            __props__.__dict__["content"] = content
            __props__.__dict__["file"] = file
            __props__.__dict__["file_name"] = file_name
            if item_id is None and not opts.urn:
                raise TypeError("Missing required property 'item_id'")
            __props__.__dict__["item_id"] = item_id
            __props__.__dict__["size"] = None
            __props__.__dict__["size_name"] = None
            __props__.__dict__["url"] = None
        super(Attachment, __self__).__init__(
            'bitwarden:index/attachment:Attachment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: pulumi.ResourceOptions | None = None,
            content: pulumi.Input[_builtins.str] | None = None,
            file: pulumi.Input[_builtins.str] | None = None,
            file_name: pulumi.Input[_builtins.str] | None = None,
            item_id: pulumi.Input[_builtins.str] | None = None,
            size: pulumi.Input[_builtins.str] | None = None,
            size_name: pulumi.Input[_builtins.str] | None = None,
            url: pulumi.Input[_builtins.str] | None = None) -> 'Attachment':
        """
        Get an existing Attachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] content: Content of the attachment
        :param pulumi.Input[_builtins.str] file: Path to the content of the attachment.
        :param pulumi.Input[_builtins.str] file_name: File name. Required if specifying `content` in a resource.
        :param pulumi.Input[_builtins.str] item_id: Identifier of the item the attachment belongs to
        :param pulumi.Input[_builtins.str] size: Size in bytes
        :param pulumi.Input[_builtins.str] size_name: Size as string
        :param pulumi.Input[_builtins.str] url: URL
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AttachmentState.__new__(_AttachmentState)

        __props__.__dict__["content"] = content
        __props__.__dict__["file"] = file
        __props__.__dict__["file_name"] = file_name
        __props__.__dict__["item_id"] = item_id
        __props__.__dict__["size"] = size
        __props__.__dict__["size_name"] = size_name
        __props__.__dict__["url"] = url
        return Attachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Output[_builtins.str | None]:
        """
        Content of the attachment
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def file(self) -> pulumi.Output[_builtins.str | None]:
        """
        Path to the content of the attachment.
        """
        return pulumi.get(self, "file")

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Output[_builtins.str]:
        """
        File name. Required if specifying `content` in a resource.
        """
        return pulumi.get(self, "file_name")

    @_builtins.property
    @pulumi.getter(name="itemId")
    def item_id(self) -> pulumi.Output[_builtins.str]:
        """
        Identifier of the item the attachment belongs to
        """
        return pulumi.get(self, "item_id")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.str]:
        """
        Size in bytes
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="sizeName")
    def size_name(self) -> pulumi.Output[_builtins.str]:
        """
        Size as string
        """
        return pulumi.get(self, "size_name")

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Output[_builtins.str]:
        """
        URL
        """
        return pulumi.get(self, "url")

