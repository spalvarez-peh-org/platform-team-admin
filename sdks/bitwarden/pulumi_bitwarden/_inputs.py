# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import sys
from collections.abc import Mapping
from typing import Any

import pulumi
import pulumi.runtime

if sys.version_info >= (3, 11):
    from typing import NotRequired, TypeAlias, TypedDict
else:
    from typing import NotRequired, TypeAlias

    from typing_extensions import TypedDict

__all__ = [
    'ItemLoginAttachmentArgs',
    'ItemLoginAttachmentArgsDict',
    'ItemLoginFieldArgs',
    'ItemLoginFieldArgsDict',
    'ItemLoginUriArgs',
    'ItemLoginUriArgsDict',
    'ItemSecureNoteAttachmentArgs',
    'ItemSecureNoteAttachmentArgsDict',
    'ItemSecureNoteFieldArgs',
    'ItemSecureNoteFieldArgsDict',
    'ItemSshKeyFieldArgs',
    'ItemSshKeyFieldArgsDict',
    'OrgCollectionMemberArgs',
    'OrgCollectionMemberArgsDict',
    'ProviderExperimentalArgs',
    'ProviderExperimentalArgsDict',
]

MYPY = False

if not MYPY:
    class ItemLoginAttachmentArgsDict(TypedDict):
        file_name: pulumi.Input[_builtins.str]
        id: pulumi.Input[_builtins.str]
        size: pulumi.Input[_builtins.str]
        size_name: pulumi.Input[_builtins.str]
        url: pulumi.Input[_builtins.str]
elif False:
    ItemLoginAttachmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ItemLoginAttachmentArgs:
    def __init__(__self__, *,
                 file_name: pulumi.Input[_builtins.str],
                 id: pulumi.Input[_builtins.str],
                 size: pulumi.Input[_builtins.str],
                 size_name: pulumi.Input[_builtins.str],
                 url: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_name", size_name)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "file_name", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="sizeName")
    def size_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "size_name")

    @size_name.setter
    def size_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "size_name", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)


if not MYPY:
    class ItemLoginFieldArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Name of the field.
        """
        boolean: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Value of a boolean field.
        """
        hidden: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value of a hidden text field.
        """
        linked: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value of a linked field.
        """
        text: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value of a text field.
        """
elif False:
    ItemLoginFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ItemLoginFieldArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 boolean: pulumi.Input[_builtins.bool] | None = None,
                 hidden: pulumi.Input[_builtins.str] | None = None,
                 linked: pulumi.Input[_builtins.str] | None = None,
                 text: pulumi.Input[_builtins.str] | None = None):
        """
        :param pulumi.Input[_builtins.str] name: Name of the field.
        :param pulumi.Input[_builtins.bool] boolean: Value of a boolean field.
        :param pulumi.Input[_builtins.str] hidden: Value of a hidden text field.
        :param pulumi.Input[_builtins.str] linked: Value of a linked field.
        :param pulumi.Input[_builtins.str] text: Value of a text field.
        """
        pulumi.set(__self__, "name", name)
        if boolean is not None:
            pulumi.set(__self__, "boolean", boolean)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if linked is not None:
            pulumi.set(__self__, "linked", linked)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the field.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def boolean(self) -> pulumi.Input[_builtins.bool] | None:
        """
        Value of a boolean field.
        """
        return pulumi.get(self, "boolean")

    @boolean.setter
    def boolean(self, value: pulumi.Input[_builtins.bool] | None):
        pulumi.set(self, "boolean", value)

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> pulumi.Input[_builtins.str] | None:
        """
        Value of a hidden text field.
        """
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "hidden", value)

    @_builtins.property
    @pulumi.getter
    def linked(self) -> pulumi.Input[_builtins.str] | None:
        """
        Value of a linked field.
        """
        return pulumi.get(self, "linked")

    @linked.setter
    def linked(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "linked", value)

    @_builtins.property
    @pulumi.getter
    def text(self) -> pulumi.Input[_builtins.str] | None:
        """
        Value of a text field.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "text", value)


if not MYPY:
    class ItemLoginUriArgsDict(TypedDict):
        value: pulumi.Input[_builtins.str]
        """
        URI Value
        """
        match: NotRequired[pulumi.Input[_builtins.str]]
        """
        URI Match
        """
elif False:
    ItemLoginUriArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ItemLoginUriArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.str],
                 match: pulumi.Input[_builtins.str] | None = None):
        """
        :param pulumi.Input[_builtins.str] value: URI Value
        :param pulumi.Input[_builtins.str] match: URI Match
        """
        pulumi.set(__self__, "value", value)
        if match is not None:
            pulumi.set(__self__, "match", match)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        URI Value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def match(self) -> pulumi.Input[_builtins.str] | None:
        """
        URI Match
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "match", value)


if not MYPY:
    class ItemSecureNoteAttachmentArgsDict(TypedDict):
        file_name: pulumi.Input[_builtins.str]
        id: pulumi.Input[_builtins.str]
        size: pulumi.Input[_builtins.str]
        size_name: pulumi.Input[_builtins.str]
        url: pulumi.Input[_builtins.str]
elif False:
    ItemSecureNoteAttachmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ItemSecureNoteAttachmentArgs:
    def __init__(__self__, *,
                 file_name: pulumi.Input[_builtins.str],
                 id: pulumi.Input[_builtins.str],
                 size: pulumi.Input[_builtins.str],
                 size_name: pulumi.Input[_builtins.str],
                 url: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "size_name", size_name)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "file_name", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="sizeName")
    def size_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "size_name")

    @size_name.setter
    def size_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "size_name", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)


if not MYPY:
    class ItemSecureNoteFieldArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Name of the field.
        """
        boolean: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Value of a boolean field.
        """
        hidden: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value of a hidden text field.
        """
        linked: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value of a linked field.
        """
        text: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value of a text field.
        """
elif False:
    ItemSecureNoteFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ItemSecureNoteFieldArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 boolean: pulumi.Input[_builtins.bool] | None = None,
                 hidden: pulumi.Input[_builtins.str] | None = None,
                 linked: pulumi.Input[_builtins.str] | None = None,
                 text: pulumi.Input[_builtins.str] | None = None):
        """
        :param pulumi.Input[_builtins.str] name: Name of the field.
        :param pulumi.Input[_builtins.bool] boolean: Value of a boolean field.
        :param pulumi.Input[_builtins.str] hidden: Value of a hidden text field.
        :param pulumi.Input[_builtins.str] linked: Value of a linked field.
        :param pulumi.Input[_builtins.str] text: Value of a text field.
        """
        pulumi.set(__self__, "name", name)
        if boolean is not None:
            pulumi.set(__self__, "boolean", boolean)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if linked is not None:
            pulumi.set(__self__, "linked", linked)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the field.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def boolean(self) -> pulumi.Input[_builtins.bool] | None:
        """
        Value of a boolean field.
        """
        return pulumi.get(self, "boolean")

    @boolean.setter
    def boolean(self, value: pulumi.Input[_builtins.bool] | None):
        pulumi.set(self, "boolean", value)

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> pulumi.Input[_builtins.str] | None:
        """
        Value of a hidden text field.
        """
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "hidden", value)

    @_builtins.property
    @pulumi.getter
    def linked(self) -> pulumi.Input[_builtins.str] | None:
        """
        Value of a linked field.
        """
        return pulumi.get(self, "linked")

    @linked.setter
    def linked(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "linked", value)

    @_builtins.property
    @pulumi.getter
    def text(self) -> pulumi.Input[_builtins.str] | None:
        """
        Value of a text field.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "text", value)


if not MYPY:
    class ItemSshKeyFieldArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Name of the field.
        """
        boolean: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Value of a boolean field.
        """
        hidden: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value of a hidden text field.
        """
        linked: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value of a linked field.
        """
        text: NotRequired[pulumi.Input[_builtins.str]]
        """
        Value of a text field.
        """
elif False:
    ItemSshKeyFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ItemSshKeyFieldArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 boolean: pulumi.Input[_builtins.bool] | None = None,
                 hidden: pulumi.Input[_builtins.str] | None = None,
                 linked: pulumi.Input[_builtins.str] | None = None,
                 text: pulumi.Input[_builtins.str] | None = None):
        """
        :param pulumi.Input[_builtins.str] name: Name of the field.
        :param pulumi.Input[_builtins.bool] boolean: Value of a boolean field.
        :param pulumi.Input[_builtins.str] hidden: Value of a hidden text field.
        :param pulumi.Input[_builtins.str] linked: Value of a linked field.
        :param pulumi.Input[_builtins.str] text: Value of a text field.
        """
        pulumi.set(__self__, "name", name)
        if boolean is not None:
            pulumi.set(__self__, "boolean", boolean)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if linked is not None:
            pulumi.set(__self__, "linked", linked)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the field.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def boolean(self) -> pulumi.Input[_builtins.bool] | None:
        """
        Value of a boolean field.
        """
        return pulumi.get(self, "boolean")

    @boolean.setter
    def boolean(self, value: pulumi.Input[_builtins.bool] | None):
        pulumi.set(self, "boolean", value)

    @_builtins.property
    @pulumi.getter
    def hidden(self) -> pulumi.Input[_builtins.str] | None:
        """
        Value of a hidden text field.
        """
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "hidden", value)

    @_builtins.property
    @pulumi.getter
    def linked(self) -> pulumi.Input[_builtins.str] | None:
        """
        Value of a linked field.
        """
        return pulumi.get(self, "linked")

    @linked.setter
    def linked(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "linked", value)

    @_builtins.property
    @pulumi.getter
    def text(self) -> pulumi.Input[_builtins.str] | None:
        """
        Value of a text field.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "text", value)


if not MYPY:
    class OrgCollectionMemberArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Identifier.
        """
        hide_passwords: NotRequired[pulumi.Input[_builtins.bool]]
        """
        [Experimental] Hide passwords.
        """
        manage: NotRequired[pulumi.Input[_builtins.bool]]
        """
        [Experimental] Can manage the collection.
        """
        read_only: NotRequired[pulumi.Input[_builtins.bool]]
        """
        [Experimental] Read/Write permissions.
        """
elif False:
    OrgCollectionMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrgCollectionMemberArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 hide_passwords: pulumi.Input[_builtins.bool] | None = None,
                 manage: pulumi.Input[_builtins.bool] | None = None,
                 read_only: pulumi.Input[_builtins.bool] | None = None):
        """
        :param pulumi.Input[_builtins.str] id: Identifier.
        :param pulumi.Input[_builtins.bool] hide_passwords: [Experimental] Hide passwords.
        :param pulumi.Input[_builtins.bool] manage: [Experimental] Can manage the collection.
        :param pulumi.Input[_builtins.bool] read_only: [Experimental] Read/Write permissions.
        """
        pulumi.set(__self__, "id", id)
        if hide_passwords is not None:
            pulumi.set(__self__, "hide_passwords", hide_passwords)
        if manage is not None:
            pulumi.set(__self__, "manage", manage)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="hidePasswords")
    def hide_passwords(self) -> pulumi.Input[_builtins.bool] | None:
        """
        [Experimental] Hide passwords.
        """
        return pulumi.get(self, "hide_passwords")

    @hide_passwords.setter
    def hide_passwords(self, value: pulumi.Input[_builtins.bool] | None):
        pulumi.set(self, "hide_passwords", value)

    @_builtins.property
    @pulumi.getter
    def manage(self) -> pulumi.Input[_builtins.bool] | None:
        """
        [Experimental] Can manage the collection.
        """
        return pulumi.get(self, "manage")

    @manage.setter
    def manage(self, value: pulumi.Input[_builtins.bool] | None):
        pulumi.set(self, "manage", value)

    @_builtins.property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> pulumi.Input[_builtins.bool] | None:
        """
        [Experimental] Read/Write permissions.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: pulumi.Input[_builtins.bool] | None):
        pulumi.set(self, "read_only", value)


if not MYPY:
    class ProviderExperimentalArgsDict(TypedDict):
        disable_sync_after_write_verification: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Skip verification of server-side modifications (like timestamp updates) after write operations - useful when the Bitwarden server makes minor, non-functional changes to objects.
        """
        embedded_client: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Use the embedded client instead of an external binary.
        """
elif False:
    ProviderExperimentalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProviderExperimentalArgs:
    def __init__(__self__, *,
                 disable_sync_after_write_verification: pulumi.Input[_builtins.bool] | None = None,
                 embedded_client: pulumi.Input[_builtins.bool] | None = None):
        """
        :param pulumi.Input[_builtins.bool] disable_sync_after_write_verification: Skip verification of server-side modifications (like timestamp updates) after write operations - useful when the Bitwarden server makes minor, non-functional changes to objects.
        :param pulumi.Input[_builtins.bool] embedded_client: Use the embedded client instead of an external binary.
        """
        if disable_sync_after_write_verification is not None:
            pulumi.set(__self__, "disable_sync_after_write_verification", disable_sync_after_write_verification)
        if embedded_client is not None:
            pulumi.set(__self__, "embedded_client", embedded_client)

    @_builtins.property
    @pulumi.getter(name="disableSyncAfterWriteVerification")
    def disable_sync_after_write_verification(self) -> pulumi.Input[_builtins.bool] | None:
        """
        Skip verification of server-side modifications (like timestamp updates) after write operations - useful when the Bitwarden server makes minor, non-functional changes to objects.
        """
        return pulumi.get(self, "disable_sync_after_write_verification")

    @disable_sync_after_write_verification.setter
    def disable_sync_after_write_verification(self, value: pulumi.Input[_builtins.bool] | None):
        pulumi.set(self, "disable_sync_after_write_verification", value)

    @_builtins.property
    @pulumi.getter(name="embeddedClient")
    def embedded_client(self) -> pulumi.Input[_builtins.bool] | None:
        """
        Use the embedded client instead of an external binary.
        """
        return pulumi.get(self, "embedded_client")

    @embedded_client.setter
    def embedded_client(self, value: pulumi.Input[_builtins.bool] | None):
        pulumi.set(self, "embedded_client", value)


