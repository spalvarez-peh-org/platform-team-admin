# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import sys
from collections.abc import Sequence
from typing import Union, overload

import pulumi
import pulumi.runtime

if sys.version_info >= (3, 11):
    pass
else:
    pass
from . import _utilities, outputs
from ._inputs import *

__all__ = ['ItemLoginArgs', 'ItemLogin']

@pulumi.input_type
class ItemLoginArgs:
    def __init__(__self__, *,
                 collection_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] | None = None,
                 favorite: pulumi.Input[_builtins.bool] | None = None,
                 fields: pulumi.Input[Sequence[pulumi.Input['ItemLoginFieldArgs']]] | None = None,
                 folder_id: pulumi.Input[_builtins.str] | None = None,
                 item_login_id: pulumi.Input[_builtins.str] | None = None,
                 name: pulumi.Input[_builtins.str] | None = None,
                 notes: pulumi.Input[_builtins.str] | None = None,
                 organization_id: pulumi.Input[_builtins.str] | None = None,
                 password: pulumi.Input[_builtins.str] | None = None,
                 reprompt: pulumi.Input[_builtins.bool] | None = None,
                 totp: pulumi.Input[_builtins.str] | None = None,
                 uris: pulumi.Input[Sequence[pulumi.Input['ItemLoginUriArgs']]] | None = None,
                 username: pulumi.Input[_builtins.str] | None = None):
        """
        The set of arguments for constructing a ItemLogin resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] collection_ids: Identifier of the collections the item belongs to.
        :param pulumi.Input[_builtins.bool] favorite: Mark as a Favorite to have item appear at the top of your Vault in the UI.
        :param pulumi.Input[Sequence[pulumi.Input['ItemLoginFieldArgs']]] fields: Extra fields.
        :param pulumi.Input[_builtins.str] folder_id: Identifier of the folder.
        :param pulumi.Input[_builtins.str] item_login_id: Identifier.
        :param pulumi.Input[_builtins.str] name: Name.
        :param pulumi.Input[_builtins.str] notes: Notes.
        :param pulumi.Input[_builtins.str] organization_id: Identifier of the organization.
        :param pulumi.Input[_builtins.str] password: Login password.
        :param pulumi.Input[_builtins.bool] reprompt: Require master password 're-prompt' when displaying secret in the UI.
        :param pulumi.Input[_builtins.str] totp: Verification code.
        :param pulumi.Input[Sequence[pulumi.Input['ItemLoginUriArgs']]] uris: URI.
        :param pulumi.Input[_builtins.str] username: Login username.
        """
        if collection_ids is not None:
            pulumi.set(__self__, "collection_ids", collection_ids)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if item_login_id is not None:
            pulumi.set(__self__, "item_login_id", item_login_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if reprompt is not None:
            pulumi.set(__self__, "reprompt", reprompt)
        if totp is not None:
            pulumi.set(__self__, "totp", totp)
        if uris is not None:
            pulumi.set(__self__, "uris", uris)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="collectionIds")
    def collection_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] | None:
        """
        Identifier of the collections the item belongs to.
        """
        return pulumi.get(self, "collection_ids")

    @collection_ids.setter
    def collection_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] | None):
        pulumi.set(self, "collection_ids", value)

    @_builtins.property
    @pulumi.getter
    def favorite(self) -> pulumi.Input[_builtins.bool] | None:
        """
        Mark as a Favorite to have item appear at the top of your Vault in the UI.
        """
        return pulumi.get(self, "favorite")

    @favorite.setter
    def favorite(self, value: pulumi.Input[_builtins.bool] | None):
        pulumi.set(self, "favorite", value)

    @_builtins.property
    @pulumi.getter
    def fields(self) -> pulumi.Input[Sequence[pulumi.Input['ItemLoginFieldArgs']]] | None:
        """
        Extra fields.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: pulumi.Input[Sequence[pulumi.Input['ItemLoginFieldArgs']]] | None):
        pulumi.set(self, "fields", value)

    @_builtins.property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Input[_builtins.str] | None:
        """
        Identifier of the folder.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "folder_id", value)

    @_builtins.property
    @pulumi.getter(name="itemLoginId")
    def item_login_id(self) -> pulumi.Input[_builtins.str] | None:
        """
        Identifier.
        """
        return pulumi.get(self, "item_login_id")

    @item_login_id.setter
    def item_login_id(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "item_login_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str] | None:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> pulumi.Input[_builtins.str] | None:
        """
        Notes.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[_builtins.str] | None:
        """
        Identifier of the organization.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str] | None:
        """
        Login password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def reprompt(self) -> pulumi.Input[_builtins.bool] | None:
        """
        Require master password 're-prompt' when displaying secret in the UI.
        """
        return pulumi.get(self, "reprompt")

    @reprompt.setter
    def reprompt(self, value: pulumi.Input[_builtins.bool] | None):
        pulumi.set(self, "reprompt", value)

    @_builtins.property
    @pulumi.getter
    def totp(self) -> pulumi.Input[_builtins.str] | None:
        """
        Verification code.
        """
        return pulumi.get(self, "totp")

    @totp.setter
    def totp(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "totp", value)

    @_builtins.property
    @pulumi.getter
    def uris(self) -> pulumi.Input[Sequence[pulumi.Input['ItemLoginUriArgs']]] | None:
        """
        URI.
        """
        return pulumi.get(self, "uris")

    @uris.setter
    def uris(self, value: pulumi.Input[Sequence[pulumi.Input['ItemLoginUriArgs']]] | None):
        pulumi.set(self, "uris", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Input[_builtins.str] | None:
        """
        Login username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _ItemLoginState:
    def __init__(__self__, *,
                 attachments: pulumi.Input[Sequence[pulumi.Input['ItemLoginAttachmentArgs']]] | None = None,
                 collection_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] | None = None,
                 creation_date: pulumi.Input[_builtins.str] | None = None,
                 deleted_date: pulumi.Input[_builtins.str] | None = None,
                 favorite: pulumi.Input[_builtins.bool] | None = None,
                 fields: pulumi.Input[Sequence[pulumi.Input['ItemLoginFieldArgs']]] | None = None,
                 folder_id: pulumi.Input[_builtins.str] | None = None,
                 item_login_id: pulumi.Input[_builtins.str] | None = None,
                 name: pulumi.Input[_builtins.str] | None = None,
                 notes: pulumi.Input[_builtins.str] | None = None,
                 organization_id: pulumi.Input[_builtins.str] | None = None,
                 password: pulumi.Input[_builtins.str] | None = None,
                 reprompt: pulumi.Input[_builtins.bool] | None = None,
                 revision_date: pulumi.Input[_builtins.str] | None = None,
                 totp: pulumi.Input[_builtins.str] | None = None,
                 uris: pulumi.Input[Sequence[pulumi.Input['ItemLoginUriArgs']]] | None = None,
                 username: pulumi.Input[_builtins.str] | None = None):
        """
        Input properties used for looking up and filtering ItemLogin resources.
        :param pulumi.Input[Sequence[pulumi.Input['ItemLoginAttachmentArgs']]] attachments: List of item attachments.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] collection_ids: Identifier of the collections the item belongs to.
        :param pulumi.Input[_builtins.str] creation_date: Date the item was created.
        :param pulumi.Input[_builtins.str] deleted_date: Date the item was deleted.
        :param pulumi.Input[_builtins.bool] favorite: Mark as a Favorite to have item appear at the top of your Vault in the UI.
        :param pulumi.Input[Sequence[pulumi.Input['ItemLoginFieldArgs']]] fields: Extra fields.
        :param pulumi.Input[_builtins.str] folder_id: Identifier of the folder.
        :param pulumi.Input[_builtins.str] item_login_id: Identifier.
        :param pulumi.Input[_builtins.str] name: Name.
        :param pulumi.Input[_builtins.str] notes: Notes.
        :param pulumi.Input[_builtins.str] organization_id: Identifier of the organization.
        :param pulumi.Input[_builtins.str] password: Login password.
        :param pulumi.Input[_builtins.bool] reprompt: Require master password 're-prompt' when displaying secret in the UI.
        :param pulumi.Input[_builtins.str] revision_date: Last time the item was updated.
        :param pulumi.Input[_builtins.str] totp: Verification code.
        :param pulumi.Input[Sequence[pulumi.Input['ItemLoginUriArgs']]] uris: URI.
        :param pulumi.Input[_builtins.str] username: Login username.
        """
        if attachments is not None:
            pulumi.set(__self__, "attachments", attachments)
        if collection_ids is not None:
            pulumi.set(__self__, "collection_ids", collection_ids)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if deleted_date is not None:
            pulumi.set(__self__, "deleted_date", deleted_date)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if item_login_id is not None:
            pulumi.set(__self__, "item_login_id", item_login_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if reprompt is not None:
            pulumi.set(__self__, "reprompt", reprompt)
        if revision_date is not None:
            pulumi.set(__self__, "revision_date", revision_date)
        if totp is not None:
            pulumi.set(__self__, "totp", totp)
        if uris is not None:
            pulumi.set(__self__, "uris", uris)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> pulumi.Input[Sequence[pulumi.Input['ItemLoginAttachmentArgs']]] | None:
        """
        List of item attachments.
        """
        return pulumi.get(self, "attachments")

    @attachments.setter
    def attachments(self, value: pulumi.Input[Sequence[pulumi.Input['ItemLoginAttachmentArgs']]] | None):
        pulumi.set(self, "attachments", value)

    @_builtins.property
    @pulumi.getter(name="collectionIds")
    def collection_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] | None:
        """
        Identifier of the collections the item belongs to.
        """
        return pulumi.get(self, "collection_ids")

    @collection_ids.setter
    def collection_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] | None):
        pulumi.set(self, "collection_ids", value)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Input[_builtins.str] | None:
        """
        Date the item was created.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "creation_date", value)

    @_builtins.property
    @pulumi.getter(name="deletedDate")
    def deleted_date(self) -> pulumi.Input[_builtins.str] | None:
        """
        Date the item was deleted.
        """
        return pulumi.get(self, "deleted_date")

    @deleted_date.setter
    def deleted_date(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "deleted_date", value)

    @_builtins.property
    @pulumi.getter
    def favorite(self) -> pulumi.Input[_builtins.bool] | None:
        """
        Mark as a Favorite to have item appear at the top of your Vault in the UI.
        """
        return pulumi.get(self, "favorite")

    @favorite.setter
    def favorite(self, value: pulumi.Input[_builtins.bool] | None):
        pulumi.set(self, "favorite", value)

    @_builtins.property
    @pulumi.getter
    def fields(self) -> pulumi.Input[Sequence[pulumi.Input['ItemLoginFieldArgs']]] | None:
        """
        Extra fields.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: pulumi.Input[Sequence[pulumi.Input['ItemLoginFieldArgs']]] | None):
        pulumi.set(self, "fields", value)

    @_builtins.property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Input[_builtins.str] | None:
        """
        Identifier of the folder.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "folder_id", value)

    @_builtins.property
    @pulumi.getter(name="itemLoginId")
    def item_login_id(self) -> pulumi.Input[_builtins.str] | None:
        """
        Identifier.
        """
        return pulumi.get(self, "item_login_id")

    @item_login_id.setter
    def item_login_id(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "item_login_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str] | None:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> pulumi.Input[_builtins.str] | None:
        """
        Notes.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[_builtins.str] | None:
        """
        Identifier of the organization.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Input[_builtins.str] | None:
        """
        Login password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def reprompt(self) -> pulumi.Input[_builtins.bool] | None:
        """
        Require master password 're-prompt' when displaying secret in the UI.
        """
        return pulumi.get(self, "reprompt")

    @reprompt.setter
    def reprompt(self, value: pulumi.Input[_builtins.bool] | None):
        pulumi.set(self, "reprompt", value)

    @_builtins.property
    @pulumi.getter(name="revisionDate")
    def revision_date(self) -> pulumi.Input[_builtins.str] | None:
        """
        Last time the item was updated.
        """
        return pulumi.get(self, "revision_date")

    @revision_date.setter
    def revision_date(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "revision_date", value)

    @_builtins.property
    @pulumi.getter
    def totp(self) -> pulumi.Input[_builtins.str] | None:
        """
        Verification code.
        """
        return pulumi.get(self, "totp")

    @totp.setter
    def totp(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "totp", value)

    @_builtins.property
    @pulumi.getter
    def uris(self) -> pulumi.Input[Sequence[pulumi.Input['ItemLoginUriArgs']]] | None:
        """
        URI.
        """
        return pulumi.get(self, "uris")

    @uris.setter
    def uris(self, value: pulumi.Input[Sequence[pulumi.Input['ItemLoginUriArgs']]] | None):
        pulumi.set(self, "uris", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Input[_builtins.str] | None:
        """
        Login username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[_builtins.str] | None):
        pulumi.set(self, "username", value)


@pulumi.type_token("bitwarden:index/itemLogin:ItemLogin")
class ItemLogin(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: pulumi.ResourceOptions | None = None,
                 collection_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] | None = None,
                 favorite: pulumi.Input[_builtins.bool] | None = None,
                 fields: pulumi.Input[Sequence[pulumi.Input[Union['ItemLoginFieldArgs', 'ItemLoginFieldArgsDict']]]] | None = None,
                 folder_id: pulumi.Input[_builtins.str] | None = None,
                 item_login_id: pulumi.Input[_builtins.str] | None = None,
                 name: pulumi.Input[_builtins.str] | None = None,
                 notes: pulumi.Input[_builtins.str] | None = None,
                 organization_id: pulumi.Input[_builtins.str] | None = None,
                 password: pulumi.Input[_builtins.str] | None = None,
                 reprompt: pulumi.Input[_builtins.bool] | None = None,
                 totp: pulumi.Input[_builtins.str] | None = None,
                 uris: pulumi.Input[Sequence[pulumi.Input[Union['ItemLoginUriArgs', 'ItemLoginUriArgsDict']]]] | None = None,
                 username: pulumi.Input[_builtins.str] | None = None,
                 __props__=None):
        """
        Create a ItemLogin resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] collection_ids: Identifier of the collections the item belongs to.
        :param pulumi.Input[_builtins.bool] favorite: Mark as a Favorite to have item appear at the top of your Vault in the UI.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ItemLoginFieldArgs', 'ItemLoginFieldArgsDict']]]] fields: Extra fields.
        :param pulumi.Input[_builtins.str] folder_id: Identifier of the folder.
        :param pulumi.Input[_builtins.str] item_login_id: Identifier.
        :param pulumi.Input[_builtins.str] name: Name.
        :param pulumi.Input[_builtins.str] notes: Notes.
        :param pulumi.Input[_builtins.str] organization_id: Identifier of the organization.
        :param pulumi.Input[_builtins.str] password: Login password.
        :param pulumi.Input[_builtins.bool] reprompt: Require master password 're-prompt' when displaying secret in the UI.
        :param pulumi.Input[_builtins.str] totp: Verification code.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ItemLoginUriArgs', 'ItemLoginUriArgsDict']]]] uris: URI.
        :param pulumi.Input[_builtins.str] username: Login username.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ItemLoginArgs | None = None,
                 opts: pulumi.ResourceOptions | None = None):
        """
        Create a ItemLogin resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ItemLoginArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ItemLoginArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: pulumi.ResourceOptions | None = None,
                 collection_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] | None = None,
                 favorite: pulumi.Input[_builtins.bool] | None = None,
                 fields: pulumi.Input[Sequence[pulumi.Input[Union['ItemLoginFieldArgs', 'ItemLoginFieldArgsDict']]]] | None = None,
                 folder_id: pulumi.Input[_builtins.str] | None = None,
                 item_login_id: pulumi.Input[_builtins.str] | None = None,
                 name: pulumi.Input[_builtins.str] | None = None,
                 notes: pulumi.Input[_builtins.str] | None = None,
                 organization_id: pulumi.Input[_builtins.str] | None = None,
                 password: pulumi.Input[_builtins.str] | None = None,
                 reprompt: pulumi.Input[_builtins.bool] | None = None,
                 totp: pulumi.Input[_builtins.str] | None = None,
                 uris: pulumi.Input[Sequence[pulumi.Input[Union['ItemLoginUriArgs', 'ItemLoginUriArgsDict']]]] | None = None,
                 username: pulumi.Input[_builtins.str] | None = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ItemLoginArgs.__new__(ItemLoginArgs)

            __props__.__dict__["collection_ids"] = collection_ids
            __props__.__dict__["favorite"] = favorite
            __props__.__dict__["fields"] = fields
            __props__.__dict__["folder_id"] = folder_id
            __props__.__dict__["item_login_id"] = item_login_id
            __props__.__dict__["name"] = name
            __props__.__dict__["notes"] = None if notes is None else pulumi.Output.secret(notes)
            __props__.__dict__["organization_id"] = organization_id
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["reprompt"] = reprompt
            __props__.__dict__["totp"] = None if totp is None else pulumi.Output.secret(totp)
            __props__.__dict__["uris"] = uris
            __props__.__dict__["username"] = None if username is None else pulumi.Output.secret(username)
            __props__.__dict__["attachments"] = None
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["deleted_date"] = None
            __props__.__dict__["revision_date"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["notes", "password", "totp", "username"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ItemLogin, __self__).__init__(
            'bitwarden:index/itemLogin:ItemLogin',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: pulumi.ResourceOptions | None = None,
            attachments: pulumi.Input[Sequence[pulumi.Input[Union['ItemLoginAttachmentArgs', 'ItemLoginAttachmentArgsDict']]]] | None = None,
            collection_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] | None = None,
            creation_date: pulumi.Input[_builtins.str] | None = None,
            deleted_date: pulumi.Input[_builtins.str] | None = None,
            favorite: pulumi.Input[_builtins.bool] | None = None,
            fields: pulumi.Input[Sequence[pulumi.Input[Union['ItemLoginFieldArgs', 'ItemLoginFieldArgsDict']]]] | None = None,
            folder_id: pulumi.Input[_builtins.str] | None = None,
            item_login_id: pulumi.Input[_builtins.str] | None = None,
            name: pulumi.Input[_builtins.str] | None = None,
            notes: pulumi.Input[_builtins.str] | None = None,
            organization_id: pulumi.Input[_builtins.str] | None = None,
            password: pulumi.Input[_builtins.str] | None = None,
            reprompt: pulumi.Input[_builtins.bool] | None = None,
            revision_date: pulumi.Input[_builtins.str] | None = None,
            totp: pulumi.Input[_builtins.str] | None = None,
            uris: pulumi.Input[Sequence[pulumi.Input[Union['ItemLoginUriArgs', 'ItemLoginUriArgsDict']]]] | None = None,
            username: pulumi.Input[_builtins.str] | None = None) -> 'ItemLogin':
        """
        Get an existing ItemLogin resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ItemLoginAttachmentArgs', 'ItemLoginAttachmentArgsDict']]]] attachments: List of item attachments.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] collection_ids: Identifier of the collections the item belongs to.
        :param pulumi.Input[_builtins.str] creation_date: Date the item was created.
        :param pulumi.Input[_builtins.str] deleted_date: Date the item was deleted.
        :param pulumi.Input[_builtins.bool] favorite: Mark as a Favorite to have item appear at the top of your Vault in the UI.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ItemLoginFieldArgs', 'ItemLoginFieldArgsDict']]]] fields: Extra fields.
        :param pulumi.Input[_builtins.str] folder_id: Identifier of the folder.
        :param pulumi.Input[_builtins.str] item_login_id: Identifier.
        :param pulumi.Input[_builtins.str] name: Name.
        :param pulumi.Input[_builtins.str] notes: Notes.
        :param pulumi.Input[_builtins.str] organization_id: Identifier of the organization.
        :param pulumi.Input[_builtins.str] password: Login password.
        :param pulumi.Input[_builtins.bool] reprompt: Require master password 're-prompt' when displaying secret in the UI.
        :param pulumi.Input[_builtins.str] revision_date: Last time the item was updated.
        :param pulumi.Input[_builtins.str] totp: Verification code.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ItemLoginUriArgs', 'ItemLoginUriArgsDict']]]] uris: URI.
        :param pulumi.Input[_builtins.str] username: Login username.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ItemLoginState.__new__(_ItemLoginState)

        __props__.__dict__["attachments"] = attachments
        __props__.__dict__["collection_ids"] = collection_ids
        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["deleted_date"] = deleted_date
        __props__.__dict__["favorite"] = favorite
        __props__.__dict__["fields"] = fields
        __props__.__dict__["folder_id"] = folder_id
        __props__.__dict__["item_login_id"] = item_login_id
        __props__.__dict__["name"] = name
        __props__.__dict__["notes"] = notes
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["password"] = password
        __props__.__dict__["reprompt"] = reprompt
        __props__.__dict__["revision_date"] = revision_date
        __props__.__dict__["totp"] = totp
        __props__.__dict__["uris"] = uris
        __props__.__dict__["username"] = username
        return ItemLogin(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> pulumi.Output[Sequence['outputs.ItemLoginAttachment']]:
        """
        List of item attachments.
        """
        return pulumi.get(self, "attachments")

    @_builtins.property
    @pulumi.getter(name="collectionIds")
    def collection_ids(self) -> pulumi.Output[Sequence[_builtins.str] | None]:
        """
        Identifier of the collections the item belongs to.
        """
        return pulumi.get(self, "collection_ids")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[_builtins.str]:
        """
        Date the item was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="deletedDate")
    def deleted_date(self) -> pulumi.Output[_builtins.str]:
        """
        Date the item was deleted.
        """
        return pulumi.get(self, "deleted_date")

    @_builtins.property
    @pulumi.getter
    def favorite(self) -> pulumi.Output[_builtins.bool | None]:
        """
        Mark as a Favorite to have item appear at the top of your Vault in the UI.
        """
        return pulumi.get(self, "favorite")

    @_builtins.property
    @pulumi.getter
    def fields(self) -> pulumi.Output[Sequence['outputs.ItemLoginField'] | None]:
        """
        Extra fields.
        """
        return pulumi.get(self, "fields")

    @_builtins.property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[_builtins.str | None]:
        """
        Identifier of the folder.
        """
        return pulumi.get(self, "folder_id")

    @_builtins.property
    @pulumi.getter(name="itemLoginId")
    def item_login_id(self) -> pulumi.Output[_builtins.str]:
        """
        Identifier.
        """
        return pulumi.get(self, "item_login_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> pulumi.Output[_builtins.str | None]:
        """
        Notes.
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[_builtins.str | None]:
        """
        Identifier of the organization.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[_builtins.str | None]:
        """
        Login password.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def reprompt(self) -> pulumi.Output[_builtins.bool | None]:
        """
        Require master password 're-prompt' when displaying secret in the UI.
        """
        return pulumi.get(self, "reprompt")

    @_builtins.property
    @pulumi.getter(name="revisionDate")
    def revision_date(self) -> pulumi.Output[_builtins.str]:
        """
        Last time the item was updated.
        """
        return pulumi.get(self, "revision_date")

    @_builtins.property
    @pulumi.getter
    def totp(self) -> pulumi.Output[_builtins.str | None]:
        """
        Verification code.
        """
        return pulumi.get(self, "totp")

    @_builtins.property
    @pulumi.getter
    def uris(self) -> pulumi.Output[Sequence['outputs.ItemLoginUri'] | None]:
        """
        URI.
        """
        return pulumi.get(self, "uris")

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Output[_builtins.str | None]:
        """
        Login username.
        """
        return pulumi.get(self, "username")

