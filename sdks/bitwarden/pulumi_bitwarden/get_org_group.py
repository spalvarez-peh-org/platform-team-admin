# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import sys

import pulumi
import pulumi.runtime

if sys.version_info >= (3, 11):
    pass
else:
    pass
from . import _utilities

__all__ = [
    'GetOrgGroupResult',
    'AwaitableGetOrgGroupResult',
    'get_org_group',
    'get_org_group_output',
]

@pulumi.output_type
class GetOrgGroupResult:
    """
    A collection of values returned by getOrgGroup.
    """
    def __init__(__self__, filter_name=None, id=None, name=None, organization_id=None):
        if filter_name and not isinstance(filter_name, str):
            raise TypeError("Expected argument 'filter_name' to be a str")
        pulumi.set(__self__, "filter_name", filter_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)

    @_builtins.property
    @pulumi.getter(name="filterName")
    def filter_name(self) -> _builtins.str | None:
        return pulumi.get(self, "filter_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str | None:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> _builtins.str:
        return pulumi.get(self, "organization_id")


class AwaitableGetOrgGroupResult(GetOrgGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgGroupResult(
            filter_name=self.filter_name,
            id=self.id,
            name=self.name,
            organization_id=self.organization_id)


def get_org_group(filter_name: _builtins.str | None = None,
                  id: _builtins.str | None = None,
                  organization_id: _builtins.str | None = None,
                  opts: pulumi.InvokeOptions | None = None) -> AwaitableGetOrgGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filterName'] = filter_name
    __args__['id'] = id
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bitwarden:index/getOrgGroup:getOrgGroup', __args__, opts=opts, typ=GetOrgGroupResult, package_ref=_utilities.get_package()).value

    return AwaitableGetOrgGroupResult(
        filter_name=pulumi.get(__ret__, 'filter_name'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organization_id=pulumi.get(__ret__, 'organization_id'))
def get_org_group_output(filter_name: pulumi.Input[_builtins.str | None] | None = None,
                         id: pulumi.Input[_builtins.str | None] | None = None,
                         organization_id: pulumi.Input[_builtins.str] | None = None,
                         opts: pulumi.InvokeOptions | pulumi.InvokeOutputOptions | None = None) -> pulumi.Output[GetOrgGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filterName'] = filter_name
    __args__['id'] = id
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bitwarden:index/getOrgGroup:getOrgGroup', __args__, opts=opts, typ=GetOrgGroupResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetOrgGroupResult(
        filter_name=pulumi.get(__response__, 'filter_name'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        organization_id=pulumi.get(__response__, 'organization_id')))
