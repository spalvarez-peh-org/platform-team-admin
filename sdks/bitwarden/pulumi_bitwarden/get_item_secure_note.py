# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import sys
from collections.abc import Sequence

import pulumi
import pulumi.runtime

if sys.version_info >= (3, 11):
    pass
else:
    pass
from . import _utilities, outputs

__all__ = [
    'GetItemSecureNoteResult',
    'AwaitableGetItemSecureNoteResult',
    'get_item_secure_note',
    'get_item_secure_note_output',
]

@pulumi.output_type
class GetItemSecureNoteResult:
    """
    A collection of values returned by getItemSecureNote.
    """
    def __init__(__self__, attachments=None, collection_ids=None, creation_date=None, deleted_date=None, favorite=None, fields=None, filter_collection_id=None, filter_folder_id=None, filter_organization_id=None, folder_id=None, id=None, name=None, notes=None, organization_id=None, reprompt=None, revision_date=None, search=None):
        if attachments and not isinstance(attachments, list):
            raise TypeError("Expected argument 'attachments' to be a list")
        pulumi.set(__self__, "attachments", attachments)
        if collection_ids and not isinstance(collection_ids, list):
            raise TypeError("Expected argument 'collection_ids' to be a list")
        pulumi.set(__self__, "collection_ids", collection_ids)
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if deleted_date and not isinstance(deleted_date, str):
            raise TypeError("Expected argument 'deleted_date' to be a str")
        pulumi.set(__self__, "deleted_date", deleted_date)
        if favorite and not isinstance(favorite, bool):
            raise TypeError("Expected argument 'favorite' to be a bool")
        pulumi.set(__self__, "favorite", favorite)
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if filter_collection_id and not isinstance(filter_collection_id, str):
            raise TypeError("Expected argument 'filter_collection_id' to be a str")
        pulumi.set(__self__, "filter_collection_id", filter_collection_id)
        if filter_folder_id and not isinstance(filter_folder_id, str):
            raise TypeError("Expected argument 'filter_folder_id' to be a str")
        pulumi.set(__self__, "filter_folder_id", filter_folder_id)
        if filter_organization_id and not isinstance(filter_organization_id, str):
            raise TypeError("Expected argument 'filter_organization_id' to be a str")
        pulumi.set(__self__, "filter_organization_id", filter_organization_id)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notes and not isinstance(notes, str):
            raise TypeError("Expected argument 'notes' to be a str")
        pulumi.set(__self__, "notes", notes)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if reprompt and not isinstance(reprompt, bool):
            raise TypeError("Expected argument 'reprompt' to be a bool")
        pulumi.set(__self__, "reprompt", reprompt)
        if revision_date and not isinstance(revision_date, str):
            raise TypeError("Expected argument 'revision_date' to be a str")
        pulumi.set(__self__, "revision_date", revision_date)
        if search and not isinstance(search, str):
            raise TypeError("Expected argument 'search' to be a str")
        pulumi.set(__self__, "search", search)

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> Sequence['outputs.GetItemSecureNoteAttachmentResult']:
        return pulumi.get(self, "attachments")

    @_builtins.property
    @pulumi.getter(name="collectionIds")
    def collection_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "collection_ids")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="deletedDate")
    def deleted_date(self) -> _builtins.str:
        return pulumi.get(self, "deleted_date")

    @_builtins.property
    @pulumi.getter
    def favorite(self) -> _builtins.bool:
        return pulumi.get(self, "favorite")

    @_builtins.property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.GetItemSecureNoteFieldResult']:
        return pulumi.get(self, "fields")

    @_builtins.property
    @pulumi.getter(name="filterCollectionId")
    def filter_collection_id(self) -> _builtins.str | None:
        return pulumi.get(self, "filter_collection_id")

    @_builtins.property
    @pulumi.getter(name="filterFolderId")
    def filter_folder_id(self) -> _builtins.str | None:
        return pulumi.get(self, "filter_folder_id")

    @_builtins.property
    @pulumi.getter(name="filterOrganizationId")
    def filter_organization_id(self) -> _builtins.str | None:
        return pulumi.get(self, "filter_organization_id")

    @_builtins.property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> _builtins.str:
        return pulumi.get(self, "folder_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str | None:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> _builtins.str:
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> _builtins.str:
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def reprompt(self) -> _builtins.bool:
        return pulumi.get(self, "reprompt")

    @_builtins.property
    @pulumi.getter(name="revisionDate")
    def revision_date(self) -> _builtins.str:
        return pulumi.get(self, "revision_date")

    @_builtins.property
    @pulumi.getter
    def search(self) -> _builtins.str | None:
        return pulumi.get(self, "search")


class AwaitableGetItemSecureNoteResult(GetItemSecureNoteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetItemSecureNoteResult(
            attachments=self.attachments,
            collection_ids=self.collection_ids,
            creation_date=self.creation_date,
            deleted_date=self.deleted_date,
            favorite=self.favorite,
            fields=self.fields,
            filter_collection_id=self.filter_collection_id,
            filter_folder_id=self.filter_folder_id,
            filter_organization_id=self.filter_organization_id,
            folder_id=self.folder_id,
            id=self.id,
            name=self.name,
            notes=self.notes,
            organization_id=self.organization_id,
            reprompt=self.reprompt,
            revision_date=self.revision_date,
            search=self.search)


def get_item_secure_note(filter_collection_id: _builtins.str | None = None,
                         filter_folder_id: _builtins.str | None = None,
                         filter_organization_id: _builtins.str | None = None,
                         id: _builtins.str | None = None,
                         search: _builtins.str | None = None,
                         opts: pulumi.InvokeOptions | None = None) -> AwaitableGetItemSecureNoteResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filterCollectionId'] = filter_collection_id
    __args__['filterFolderId'] = filter_folder_id
    __args__['filterOrganizationId'] = filter_organization_id
    __args__['id'] = id
    __args__['search'] = search
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bitwarden:index/getItemSecureNote:getItemSecureNote', __args__, opts=opts, typ=GetItemSecureNoteResult, package_ref=_utilities.get_package()).value

    return AwaitableGetItemSecureNoteResult(
        attachments=pulumi.get(__ret__, 'attachments'),
        collection_ids=pulumi.get(__ret__, 'collection_ids'),
        creation_date=pulumi.get(__ret__, 'creation_date'),
        deleted_date=pulumi.get(__ret__, 'deleted_date'),
        favorite=pulumi.get(__ret__, 'favorite'),
        fields=pulumi.get(__ret__, 'fields'),
        filter_collection_id=pulumi.get(__ret__, 'filter_collection_id'),
        filter_folder_id=pulumi.get(__ret__, 'filter_folder_id'),
        filter_organization_id=pulumi.get(__ret__, 'filter_organization_id'),
        folder_id=pulumi.get(__ret__, 'folder_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        notes=pulumi.get(__ret__, 'notes'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        reprompt=pulumi.get(__ret__, 'reprompt'),
        revision_date=pulumi.get(__ret__, 'revision_date'),
        search=pulumi.get(__ret__, 'search'))
def get_item_secure_note_output(filter_collection_id: pulumi.Input[_builtins.str | None] | None = None,
                                filter_folder_id: pulumi.Input[_builtins.str | None] | None = None,
                                filter_organization_id: pulumi.Input[_builtins.str | None] | None = None,
                                id: pulumi.Input[_builtins.str | None] | None = None,
                                search: pulumi.Input[_builtins.str | None] | None = None,
                                opts: pulumi.InvokeOptions | pulumi.InvokeOutputOptions | None = None) -> pulumi.Output[GetItemSecureNoteResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filterCollectionId'] = filter_collection_id
    __args__['filterFolderId'] = filter_folder_id
    __args__['filterOrganizationId'] = filter_organization_id
    __args__['id'] = id
    __args__['search'] = search
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bitwarden:index/getItemSecureNote:getItemSecureNote', __args__, opts=opts, typ=GetItemSecureNoteResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetItemSecureNoteResult(
        attachments=pulumi.get(__response__, 'attachments'),
        collection_ids=pulumi.get(__response__, 'collection_ids'),
        creation_date=pulumi.get(__response__, 'creation_date'),
        deleted_date=pulumi.get(__response__, 'deleted_date'),
        favorite=pulumi.get(__response__, 'favorite'),
        fields=pulumi.get(__response__, 'fields'),
        filter_collection_id=pulumi.get(__response__, 'filter_collection_id'),
        filter_folder_id=pulumi.get(__response__, 'filter_folder_id'),
        filter_organization_id=pulumi.get(__response__, 'filter_organization_id'),
        folder_id=pulumi.get(__response__, 'folder_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        notes=pulumi.get(__response__, 'notes'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        reprompt=pulumi.get(__response__, 'reprompt'),
        revision_date=pulumi.get(__response__, 'revision_date'),
        search=pulumi.get(__response__, 'search')))
