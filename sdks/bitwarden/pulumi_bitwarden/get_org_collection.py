# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import sys
from collections.abc import Sequence

import pulumi
import pulumi.runtime

if sys.version_info >= (3, 11):
    pass
else:
    pass
from . import _utilities, outputs

__all__ = [
    'GetOrgCollectionResult',
    'AwaitableGetOrgCollectionResult',
    'get_org_collection',
    'get_org_collection_output',
]

@pulumi.output_type
class GetOrgCollectionResult:
    """
    A collection of values returned by getOrgCollection.
    """
    def __init__(__self__, id=None, members=None, name=None, organization_id=None, search=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if search and not isinstance(search, str):
            raise TypeError("Expected argument 'search' to be a str")
        pulumi.set(__self__, "search", search)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str | None:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetOrgCollectionMemberResult']:
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> _builtins.str:
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def search(self) -> _builtins.str | None:
        return pulumi.get(self, "search")


class AwaitableGetOrgCollectionResult(GetOrgCollectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgCollectionResult(
            id=self.id,
            members=self.members,
            name=self.name,
            organization_id=self.organization_id,
            search=self.search)


def get_org_collection(id: _builtins.str | None = None,
                       organization_id: _builtins.str | None = None,
                       search: _builtins.str | None = None,
                       opts: pulumi.InvokeOptions | None = None) -> AwaitableGetOrgCollectionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['organizationId'] = organization_id
    __args__['search'] = search
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bitwarden:index/getOrgCollection:getOrgCollection', __args__, opts=opts, typ=GetOrgCollectionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetOrgCollectionResult(
        id=pulumi.get(__ret__, 'id'),
        members=pulumi.get(__ret__, 'members'),
        name=pulumi.get(__ret__, 'name'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        search=pulumi.get(__ret__, 'search'))
def get_org_collection_output(id: pulumi.Input[_builtins.str | None] | None = None,
                              organization_id: pulumi.Input[_builtins.str] | None = None,
                              search: pulumi.Input[_builtins.str | None] | None = None,
                              opts: pulumi.InvokeOptions | pulumi.InvokeOutputOptions | None = None) -> pulumi.Output[GetOrgCollectionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['organizationId'] = organization_id
    __args__['search'] = search
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('bitwarden:index/getOrgCollection:getOrgCollection', __args__, opts=opts, typ=GetOrgCollectionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetOrgCollectionResult(
        id=pulumi.get(__response__, 'id'),
        members=pulumi.get(__response__, 'members'),
        name=pulumi.get(__response__, 'name'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        search=pulumi.get(__response__, 'search')))
